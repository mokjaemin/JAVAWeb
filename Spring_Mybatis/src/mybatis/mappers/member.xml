<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.member">
	<!-- 결과를 memberVO로 전달 -->
	<resultMap id="memResult" type="memberVO">
		<result property="id" column="id" />
        <result property="pwd" column="pwd" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="joinDate" column="joinDate" />
	</resultMap>
	
	
	<!-- 결과를 HashMap으로 전달 -->
	<!-- key and value -->
	<!-- column = key, property = value -->
	<!-- <resultMap id="memResult" type="java.util.HashMap">
      <result property="id" column="id" />
      <result property="pwd" column="pwd" />
      <result property="name" column="name" />
      <result property="email" column="email" />
      <result property="joinDate" column="joinDate" />
   </resultMap> -->





	<!-- 실습 1 -->
	<select id="selectAllMemberList" resultMap="memResult">
    <![CDATA[
        select * from t_member	order by joinDate desc	 	
    ]]>
	</select>





	<!-- 실습 2 -->
	<select id="selectName" resultType="String">
	    <![CDATA[
		select name from t_member
		where id = 'son7'			
	    ]]>
	</select>
	
	<select id="selectPwd" resultType="int" >
		  <![CDATA[ 
		    select pwd from t_member 
		    where id = 'son7'
		 ]]>
	 </select> 
	 
	 
	 
	 
	<!-- 실습3 -->
	<!-- resultType은 위에서 지정한 방식 사용 또는 다른 방식 -->
	<!-- resultMap은 여러개의 정보를 조회, resultType은 한개의 정보 조회 -->
	<!-- parameterType은 sql에 전달되는 데이터의 조건 -->
	<select id="selectMemberById" resultType="memberVO"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         id=#{id}			
      ]]>
	 </select>	
	
	<select id="selectMemberByPwd" resultMap="memResult"  parameterType="int" >
      <![CDATA[
         select * from t_member
         where
         pwd = #{pwd}			
      ]]>
    </select>
    
    
    
    
    <!-- 실습 4 -->
    <insert id="insertMember"  parameterType="memberVO">
		<![CDATA[
		 insert into t_member(id,pwd, name, email)
		 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
	</insert>
	
	<insert id="insertMember2"  parameterType="java.util.Map">
		<![CDATA[
			 insert into t_member(id,pwd, name, email)
			 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
   </insert>
   
   <update id="updateMember"  parameterType="memberVO">
     <![CDATA[
	     update t_member
	     set pwd=#{pwd}, name=#{name}, email=#{email}
	     where
	     id=#{id}
      ]]>      
   </update> 
     
   <delete id="deleteMember"  parameterType="String">
	<![CDATA[
	   delete from  t_member
	   where
	   id=#{id}
	]]>      
  </delete>
	
	
	
	
	
	
  <!-- 실습5 -->
  <!-- 동적 SQL문 -->
  <!-- if문 사용 -->
  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
      <![CDATA[
          select * from t_member
      ]]>
      <where>
         <if test=" name != ''  and  name != null">
            name=#{name}
         </if>
         <if test="email != ''  and email != null ">
           and email = #{email}
         </if>
      </where>
      order by joinDate desc
  </select>
  
  
  
  <!-- choose문 사용 -->
  <!-- <select id="searchMember" parameterType="memberVO" resultMap="memResult">
	   <![CDATA[
         select * from t_member 
      ]]>
       <where>
		  <choose>
		      <when test="name != '' and name != null and  email != '' and email != null">
			     name=#{name} and email=#{email}
		      </when>
		      <when test="name != '' and name != null">
			     name = #{name}
		      </when>
		      <when test="email !='' and email != null">
			    email = #{email}
		      </when>
	      </choose>
       </where>
       order by joinDate desc
   </select> -->
   
   
   
   <!-- for each문 사용하기1 --> 
   <!-- select -->
   <!-- <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map">
      <![CDATA[
        select * from t_member  
      ]]>
      in은 모두는 아니지만 여러레코드의 정보를 조회할때 사용
      where name in
      <foreach item="item" collection="list" open="(" separator="," close=")" >
         #{item}
      </foreach>
	  결과적으로
      where name in
      ('손흥민', '이순신','목주형')
      order by joinDate desc
   </select> -->
   
   
   
   
   <!-- for each문 사용하기2 -->
   <!-- insert -->
   <insert id="foreachInsert"  parameterType="java.util.Map">
      <foreach item="item"  collection="list"   open="INSERT ALL" separator=" " close="SELECT * FROM DUAL" >
          INTO  t_member(id, pwd, name, email)
          VALUES  (#{item.id},
                    #{item.pwd},
                    #{item.name},
                    #{item.email})
      </foreach>
   </insert>
   
   
  
  
   <!-- sql태그 이용해 공통된 부분 편하게 사용하기 -->
   <sql id="common">
	    <![CDATA[
	      select * from t_member
	     ]]> 
   </sql>
   <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map">
	      <include refid="common" />
	      <!-- in은 모두는 아니지만 여러레코드의 정보를 조회할때 사용 -->
	      where name in
	      <foreach item="item" collection="list" open="(" separator="," close=")" >
	         #{item}
	      </foreach>
		  <!-- 결과적으로
	      where name in
	      ('손흥민', '이순신','목주형') -->
	      order by joinDate desc
   </select>
  
   
   
   <!--  like 검색1 -->
   <!-- 해당 부분이 포함된 데이터 출력 -->
   <!-- 오류 발생하는 방법임 -->
   <!-- <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%'#{name}'%'		
      ]]>
   </select> -->
   
   
   <!--  like 검색2 -->
   <!-- 올바른 방법 -->
   <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
    </select>
</mapper>